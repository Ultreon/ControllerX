plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
loom {
    forge {
        mixinConfigs "controllerx-common.mixins.json", "controllerx.mixins.json"

        accessWidenerPath = file("$projectDir/../common/src/main/resources/controllerx.accesswidener")
        convertAccessWideners = true
    }
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:$forge_version"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:$architectury_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modImplementation("fuzs.forgeconfigscreens:forgeconfigscreens-forge:8.0.2")

    include(forgeRuntimeLibrary(implementation("io.github.libsdl4j:libsdl4j:$libsdl4j_version")))
    modImplementation("com.github.Ultreon.ultreonlib:ultreon-lib-forge:$ultreonlib_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }

    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-collections-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-commons-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-crash-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-datetime-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-events-v1:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-functions-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-registries-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-resources-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-text-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
    forgeRuntimeLibrary api("com.github.Ultreon.corelibs:corelibs-translations-v0:$corelibs_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")

    manifest {
        attributes([
                "Specification-Title"     : "controllerx",
                "Specification-Vendor"    : "Ultreon",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Ultreon",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Mixin-Configs"           : "controllerx.mixins.json,controllerx-common.mixins.json"
        ])
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }
}
