plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = file("$projectDir/../common/src/main/resources/controllerx.accesswidener")
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

loom {
    runs {
        client {
            // Disable refmaps
            property "mixin.env.refmap.enabled", "false"
        }
    }
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases" }
    maven { url "https://fuzs.github.com/modresources/raw" }
    maven { url "https://gitlab.com/api/v4/groups/9962021/-/packages/maven" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:$architectury_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modLocalRuntime "fuzs.forgeconfigscreens:forgeconfigscreens-fabric:8.0.2"
    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:8.0.0"

    include(implementation("io.github.libsdl4j:libsdl4j:$libsdl4j_version"))
    modImplementation("dev.ultreon.mods:ultreonlib-fabric:$ultreonlib_version")

    modImplementation("com.terraformersmc:modmenu:7.2.2")

    implementation("dev.ultreon.corelibs:corelibs-collections-v0:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-commons-v0:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-crash-v0:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-datetime-v0:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-events-v1:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-functions-v0:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-registries-v0:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-resources-v0:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-text-v0:$corelibs_version")
    implementation("dev.ultreon.corelibs:corelibs-translations-v0:$corelibs_version")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
