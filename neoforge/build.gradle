plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
loom {

}
architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:$neoforge_version"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:$architectury_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    modImplementation("fuzs.forgeconfigscreens:forgeconfigscreens-forge:8.0.2")

    include(forgeRuntimeLibrary(implementation("io.github.libsdl4j:libsdl4j:$libsdl4j_version")))
    modImplementation("dev.ultreon.ultreonlib:ultreonlib-neoforge:$ultreonlib_version") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.code.findbugs"
        exclude group: "com.google.guava"
        exclude group: "com.google.l2objc"
        exclude group: "org.jetbrains"
        exclude group: "org.checkerframework"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }
}
